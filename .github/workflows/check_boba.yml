name: Check Boba Availability

on:
  schedule:
    - cron: '*/15 * * * *'  # Runs every 15 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  check-boba:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install Chrome and ChromeDriver
      run: |
        # Install Chrome
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable xvfb
        
        # Get Chrome version and download matching ChromeDriver
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f 3)
        CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d "." -f 1)
        echo "Chrome version: $CHROME_VERSION"
        echo "Chrome major version: $CHROME_MAJOR_VERSION"
        
        # Download ChromeDriver
        wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROME_VERSION/linux64/chromedriver-linux64.zip
        unzip chromedriver-linux64.zip
        chmod +x chromedriver-linux64/chromedriver
        
        # Set path and verify versions
        echo "CHROMEDRIVER_PATH=$PWD/chromedriver-linux64/chromedriver" >> $GITHUB_ENV
        $PWD/chromedriver-linux64/chromedriver --version
        google-chrome --version
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools
        pip install -r requirements.txt
    
    - name: Create env file
      run: |
        echo "EMAIL_SENDER=${{ secrets.EMAIL_SENDER }}" > .env
        echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
        echo "EMAIL_RECEIVER=${{ secrets.EMAIL_RECEIVER }}" >> .env
        echo "WAS_UNAVAILABLE=${{ vars.WAS_UNAVAILABLE }}" >> .env
    
    - name: Run boba checker
      run: |
        # Start virtual display
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        export DISPLAY=:99
        # Print current status for debugging
        echo "Current WAS_UNAVAILABLE value: ${{ vars.WAS_UNAVAILABLE }}"
        python boba_checker.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WAS_UNAVAILABLE: ${{ vars.WAS_UNAVAILABLE }}

    - name: Update WAS_UNAVAILABLE variable
      if: success()
      run: |
        # Install GitHub CLI
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
        
        # Read new status and update variable
        NEW_STATUS=$(cat boba_status.json | jq -r .was_unavailable)
        echo "New status: $NEW_STATUS"
        
        # Update the variable using GitHub CLI
        gh variable set WAS_UNAVAILABLE "$NEW_STATUS" --repo $GITHUB_REPOSITORY
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 