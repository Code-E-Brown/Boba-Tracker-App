name: Check Boba Availability

on:
  schedule:
    - cron: '*/15 * * * *'  # Runs every 15 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  check-boba:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install Chrome and ChromeDriver
      run: |
        # Install Chrome
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable xvfb
        
        # Get Chrome version and download matching ChromeDriver
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f 3)
        CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d "." -f 1)
        echo "Chrome version: $CHROME_VERSION"
        echo "Chrome major version: $CHROME_MAJOR_VERSION"
        
        # Download ChromeDriver
        wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROME_VERSION/linux64/chromedriver-linux64.zip
        unzip chromedriver-linux64.zip
        chmod +x chromedriver-linux64/chromedriver
        
        # Set path and verify versions
        echo "CHROMEDRIVER_PATH=$PWD/chromedriver-linux64/chromedriver" >> $GITHUB_ENV
        $PWD/chromedriver-linux64/chromedriver --version
        google-chrome --version
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools
        pip install -r requirements.txt
    
    - name: Create env file
      run: |
        echo "EMAIL_SENDER=${{ secrets.EMAIL_SENDER }}" > .env
        echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
        echo "EMAIL_RECEIVER=${{ secrets.EMAIL_RECEIVER }}" >> .env
        echo "WAS_UNAVAILABLE=${{ secrets.WAS_UNAVAILABLE }}" >> .env
    
    - name: Run boba checker
      id: boba
      run: |
        # Start virtual display
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        export DISPLAY=:99
        python boba_checker.py > output.txt
        echo "status=$(cat boba_status.json | jq -r .was_unavailable)" >> $GITHUB_OUTPUT

    - name: Update WAS_UNAVAILABLE secret
      uses: gliech/create-github-secret-action@v1
      if: always()
      with:
        name: WAS_UNAVAILABLE
        value: ${{ steps.boba.outputs.status }}
        pa_token: ${{ secrets.PA_TOKEN }}
    
    # Upload the status file for next run
    - name: Upload status file
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if the script fails
      with:
        name: boba-status
        path: boba_status.json
        retention-days: 1  # Keep for 1 day 